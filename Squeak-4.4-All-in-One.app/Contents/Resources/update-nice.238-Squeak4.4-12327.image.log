========== Collections-nice.520 ==========Introduce Character null========== CollectionsTests-nice.204 ==========Don't let Character null fail========== Kernel-fbs.762 ==========Turn Promise into a fully chainable object with decent error handling.(This implements the Smalltalk equivalent of JavaScript's Promises/A+ specification.)>>> Kernel-fbs.761 <<<Signal a proper error for a missing Trait requirement, so the Debugger can catch it.========== KernelTests-fbs.252 ==========Turn Promise into a fully chainable object with decent error handling.(This implements the Smalltalk equivalent of JavaScript's Promises/A+ specification.)========== MorphicExtrasTests-fbs.2 ==========Flap tests belong in MorphicExtrasTests.========== Tools-fbs.467 ==========Apply "JIT development" to implementing a Trait application.========== Environments-cwp.30 ==========Added a comment.>>> Environments-cwp.29 <<<Environment refactoring, part 3 of 3: remove the old instance variables.========== Network-fbs.141 ==========Move MailComposition >> #addAttachment to Morphic-Support because the sole sender of #addAttachment (MailComposition >> #morphicOpen) is in Morphic-Support.========== Compression-fbs.33 ==========Use UIManager >> #informUserDuring: in preference to Utilities class >> #informUserDuring:. The latter acts as a proxy in this case anyway, and Utilities is something that needs to be torn apart and proper homes found for its various parts.>>> Compression-nice.32 <<<Add a utility #contentStreamFromEncoding: to decode some ZipArchiveMember with prescribed encoding ('latin1', 'utf8' etc...)========== Collections-fbs.521 ==========Avoid using Utilities; UIManager default provides a better hook.========== CollectionsTests-nice.205 ==========Better use allByteCharacters than allCharacters.They do the same, but second one is misleading, not all Characters are byte now.========== Monticello-fbs.548 ==========Rip out the Morphic UI building logic: it's no longer needed.#workingCopy(List|Tree)Morph have no senders, so they go too.>>> Monticello-nice.547 <<<Encode all .mcz and .mcd text files in UTF8, not only snaphot/source.st.>>> Monticello-nice.546 <<<Let's encode .mcz/snapshot/source.st in UTF8Let's decode UTF8 in MCStReader.Previously, it was encoded in latin-1 (iso-8859-L1) for ByteString and UTF-32BE for WideString.And would always be decoded in latin-1 by MCStReader.Note that compatibility with legacy code is handled by catching InvalidUTF8 exception.An alternative would be to use a BOM in new snapshot. However, since the snapshot/source.st is not used by Squeak tools, it's not really worth.========== Kernel-fbs.769 ==========Avoid using Utilities; UIManager default provides a better hook.>>> Kernel-fbs.768 <<<These methods ask the user for something. (As in, that's their primary purpose.) As such they belong in the same package as UIManager, ToolBuilder-Kernel.(I don't see the value of these 'convenience' methods, but I suppose others do.)>>> Kernel-fbs.767 <<<StringHolder >> #spawn: belongs in Tools.>>> Kernel-fbs.766 <<<Object #chasePointers, #explorePointers are how you open up a PointerFinder, so belong in Tools.>>> Kernel-fbs.765 <<<#openLabel: and #open are entries to the Tools, so belong in the Tools package.>>> Kernel-fbs.764 <<<eToyStreamedRepresentationNotifying: -> EToys package.>>> Kernel-fbs.763 <<<Object >> #localeChanged moved to System-Localization because it's a localisation thing, and because I'd rather have System depend on Kernel than Kernel depend on System.========== EToys-dtl.101 ==========Use Project>>openProject: instead of direct reference to ST80 ProjectView for entering a project from MVC>>> EToys-fbs.100 <<<Levente Uzonyi points out that #stencil is quite general, so belongs in Morphic-Support, rather than EToys.>>> EToys-fbs.99 <<<eToyStreamedRepresentationNotifying: -> EToys package.>>> EToys-fbs.98 <<<Form >> #stencil and Pen >> #putDotOfDiameter:at: are only called from EToys code, so they belong in EToys.>>> EToys-fbs.97 <<<Move TextDomainManager >> #allMethodsWithTranslations to EToys, because of the reference to EToyVocabulary.If we split up this kind of searching we could isolate this reference to EToys. Then we could restore this function to System-Localization.========== System-fbs.544 ==========Avoid using Utilities; UIManager default provides a better hook.>>> System-nice.543 <<<Correct utf8 everywhere bug: MczInstaller does not understand zip>>> System-fbs.542 <<<PartsBin and friends already have #localeChanged implementations.I don't know if "self class environment" is the right thing here. I don't want to use Smalltalk globals. Perhaps the right thing is to say "self environment" where #environment may be set, or defaults to Smalltalk globals.Object >> #localeChanged moved here because it's a localisation thing, and because I'd rather have System depend on Kernel than Kernel depend on System.>>> System-nice.541 <<<Let MczInstaller know that .mcz text files are encoded in utf8.>>> System-fbs.540 <<<Move TextDomainManager >> #allMethodsWithTranslations to EToys, because of the reference to EToyVocabulary.If we split up this kind of searching we could isolate this reference to EToys. Then we could restore this function to System-Localization.>>> System-nice.539 <<<Now that .mcz/snapshot/source.st are encoded in UTF8,Let MczInstaller decode UTF8.Previously, snapshot/source.st was encoded in latin-1 (iso-8859-L1) for ByteString and UTF-32BE for WideString.And would always be decoded in MacRoman by MczInstaller (or UTF-8 if there were a BOM, but there weren't)Note that .mcz do not use a BOM for compatibility with legacy code.Thus compatibility is handled by catching InvalidUTF8 exception.The rationale is that previous interpretation of snapshot/source.st was completely broken and presumably not used.So adding a bit of complexity with a BOM compatibility is not really worth.========== Morphic-fbs.656 ==========Levente Uzonyi points out that #stencil is quite general, so belongs in Morphic-Support, rather than EToys.>>> Morphic-fbs.655 <<<Move MailComposition >> #addAttachment to Morphic-Support because the sole sender of #addAttachment (MailComposition >> #morphicOpen) is in Morphic-Support.>>> Morphic-fbs.654 <<<This removes two references to UserDialogBoxMorph in favour of calls to UIManager.However, both these methods currently pop up dialogs _centred_ in the screen. If we wish to preserve that, then we need to add #inform:at: to UIManager's protocol (and implement it in the various UIManager subclasses).>>> Morphic-fbs.653 <<<Move ToolBuilder-Morphic to Morphic-ToolBuilder.========== Graphics-fbs.212 ==========Prefer using UIManager default to the proxying Utilities class.>>> Graphics-fbs.211 <<<Form >> #stencil and Pen >> #putDotOfDiameter:at: are only called from EToys code, so they belong in EToys.========== ST80-fbs.145 ==========Move ToolBuilder-MVC to ST80-ToolBuilder.========== SUnitGUI-fbs.57 ==========Move ToolBuilder-SUnit to SUnitGUI-ToolBuilder.========== Tests-fbs.220 ==========EToys no longer depends on ST80!>>> Tests-fbs.219 <<<Network no longer depends on Tools.>>> Tests-fbs.218 <<<Update the dependency tests to reflect the new state of the world.========== ToolBuilder-Kernel-fbs.54 ==========These methods ask the user for something. (As in, that's their primary purpose.) As such they belong in the same package as UIManager, ToolBuilder-Kernel.(I don't see the value of these 'convenience' methods, but I suppose others do.)========== ToolBuilder-MVC-fbs.33 ==========Move ToolBuilder-MVC to ST80-ToolBuilder.========== ToolBuilder-Morphic-fbs.90 ==========Move ToolBuilder-Morphic to Morphic-ToolBuilder.========== ToolBuilder-SUnit-fbs.18 ==========Move ToolBuilder-SUnit to SUnitGUI-ToolBuilder.========== Tools-fbs.470 ==========StringHolder >> #spawn: belongs in Tools.>>> Tools-fbs.469 <<<Object #chasePointers, #explorePointers are how you open up a PointerFinder, so belong in Tools.>>> Tools-fbs.468 <<<#openLabel: and #open are entries to the Tools, so belong in the Tools package.