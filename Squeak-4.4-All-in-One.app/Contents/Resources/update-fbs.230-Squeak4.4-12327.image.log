========== Collections-bf.512 ==========Debugging should *not* modify a stream.========== CollectionsTests-fbs.202 ==========nonSEarray2 contains a ClassBinding, which prints differently.>>> CollectionsTests-fbs.201 <<<Make the tests spit out useful error messages.This test:    self assert: '{#Array}' equals: nonSEarray2 printString.fails because nonSEarray2 := { Smalltalk globals associationAt: #Array } is now an Array with a ClassBinding.========== Monticello-bf.535 ==========Warn user about an interrupted modal dialog.========== Compiler-eem.262 ==========Restore and improve upon the comment in LiteralVariableNode>>emitCodeForStore:encoder:>>> Compiler-nice.261 <<<Fix decompiler tests that fails due to chained LiteralVariable (Binding) assignements.>>> Compiler-nice.260 <<<When we assign a special binding just for effect, the binding seems to be pushed twice on the stack1) once in emitCodeForLoad: stack forValue: false encoder: encoder.2) then in emitCodeForStore: stack encoder: encoderand IMHO it's a bug because the binding is popped only once...I suggest a different and simpler implementation for emitCodeForStorePop:encoder: we don't have to dup the value on the stack in this case.>>> Compiler-eem.259 <<<Fix literal duplication with special bindings for classes.LiteralNode>>reserve: needs to use sharableLitIndex: ifit is a special binding.The decompiler is still broken by Compiler-eem.258 forv := SpecialBinding := expr.  But at least methods containingglobals are debuggable again.>>> Compiler-eem.258 <<<Fix store of special bindings.  Exsting code dropped thevalue assigned from the stack, so v := binding := expr wouldleave v holding binding, not expr.  New code generates	push expr	push binding	duplicate expr (by pushTemp: of expr's stack index)	send value:	pop========== EToys-bf.95 ==========* make project loading work* no more undeclared globals========== System-bf.523 ==========Fix an "interesting" bug where project loading changed the identity hash of classes already in the system. That is an unexpected side-effect of becomeForward: (which I thought did not modify the object).>>> System-bf.522 <<<* make project loading work>>> System-eem.521 <<<specialObjectsArray changes.- Add unusedBytecode- replace old Alien callback invocation message with new  message (Alien-eem.16 or later),- work around what maybe a bug in Environments.	SmalltalkImage current bindingOf: #Processor   answers an Alias, which breaks the VM.  So (at least   temporarily) reuse the existing entry.========== Morphic-bf.646 ==========* make project loading work========== SUnit-fbs.94 ==========ClassBuilder wants a Symbol for a subclass name. Let's make sure it gets one.========== Tests-fbs.199 ==========Adding an Etoys->ST80 dependency isn't harmful, so we just update the expected dependency graph.>>> Tests-fbs.198 <<<Nebraska is now loaded into a minimal trunk, so this test must go.========== ReleaseBuilder-fbs.95 ==========The methods in 45Deprecated have been deprecated, but they're only meant to be removed at some point in the future, not today.>>> ReleaseBuilder-fbs.94 <<<You have to specify the project when using URL-based Installers.========== Environments-bf.23 ==========When deleting a class, remove it from imports and exports, too.>>> Environments-nice.22 <<<Rename a mis-guiding parameter>>> Environments-fbs.21 <<<When a class removes itself from the system, we need to forget about the class... including our reference to it in our list of bindings.>>> Environments-cwp.20 <<<Bindings cleanup stage 2/2.========== 45Deprecated-fbs.1 ==========Use `UIManager default edit: 'foo' title: 'bar'` instead of `'foo' openInWorkspaceWithTitle: 'bar'`.This method needlessly causes a dependency between Collections and Toolbuilder-Kernel.